// Code generated by entc, DO NOT EDIT.

package repository

import (
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the repository type in the database.
	Label = "repository"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "repo_id"
	// FieldRepositoryName holds the string denoting the repository_name field in the database.
	FieldRepositoryName = "repository_name"
	// FieldGitOrganization holds the string denoting the git_organization field in the database.
	FieldGitOrganization = "git_organization"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldGitURL holds the string denoting the git_url field in the database.
	FieldGitURL = "git_url"
	// EdgeWorkflows holds the string denoting the workflows edge name in mutations.
	EdgeWorkflows = "workflows"
	// EdgeCodecov holds the string denoting the codecov edge name in mutations.
	EdgeCodecov = "codecov"
	// WorkflowsFieldID holds the string denoting the ID field of the Workflows.
	WorkflowsFieldID = "id"
	// CodeCovFieldID holds the string denoting the ID field of the CodeCov.
	CodeCovFieldID = "id"
	// Table holds the table name of the repository in the database.
	Table = "repositories"
	// WorkflowsTable is the table that holds the workflows relation/edge.
	WorkflowsTable = "workflows"
	// WorkflowsInverseTable is the table name for the Workflows entity.
	// It exists in this package in order to avoid circular dependency with the "workflows" package.
	WorkflowsInverseTable = "workflows"
	// WorkflowsColumn is the table column denoting the workflows relation/edge.
	WorkflowsColumn = "repository_workflows"
	// CodecovTable is the table that holds the codecov relation/edge.
	CodecovTable = "code_covs"
	// CodecovInverseTable is the table name for the CodeCov entity.
	// It exists in this package in order to avoid circular dependency with the "codecov" package.
	CodecovInverseTable = "code_covs"
	// CodecovColumn is the table column denoting the codecov relation/edge.
	CodecovColumn = "repository_codecov"
)

// Columns holds all SQL columns for repository fields.
var Columns = []string{
	FieldID,
	FieldRepositoryName,
	FieldGitOrganization,
	FieldDescription,
	FieldGitURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// RepositoryNameValidator is a validator for the "repository_name" field. It is called by the builders before save.
	RepositoryNameValidator func(string) error
	// GitOrganizationValidator is a validator for the "git_organization" field. It is called by the builders before save.
	GitOrganizationValidator func(string) error
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// GitURLValidator is a validator for the "git_url" field. It is called by the builders before save.
	GitURLValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
