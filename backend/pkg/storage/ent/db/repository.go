// Code generated by entc, DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/flacatus/qe-dashboard-backend/pkg/storage/ent/db/repository"
	"github.com/google/uuid"
)

// Repository is the model entity for the Repository schema.
type Repository struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RepositoryName holds the value of the "repository_name" field.
	RepositoryName string `json:"repository_name,omitempty"`
	// GitOrganization holds the value of the "git_organization" field.
	GitOrganization string `json:"git_organization,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// GitURL holds the value of the "git_url" field.
	GitURL           string `json:"git_url,omitempty"`
	code_cov_repo_id *uuid.UUID
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Repository) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case repository.FieldRepositoryName, repository.FieldGitOrganization, repository.FieldDescription, repository.FieldGitURL:
			values[i] = new(sql.NullString)
		case repository.FieldID:
			values[i] = new(uuid.UUID)
		case repository.ForeignKeys[0]: // code_cov_repo_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Repository", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Repository fields.
func (r *Repository) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case repository.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case repository.FieldRepositoryName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field repository_name", values[i])
			} else if value.Valid {
				r.RepositoryName = value.String
			}
		case repository.FieldGitOrganization:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_organization", values[i])
			} else if value.Valid {
				r.GitOrganization = value.String
			}
		case repository.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case repository.FieldGitURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field git_url", values[i])
			} else if value.Valid {
				r.GitURL = value.String
			}
		case repository.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field code_cov_repo_id", values[i])
			} else if value.Valid {
				r.code_cov_repo_id = new(uuid.UUID)
				*r.code_cov_repo_id = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Repository.
// Note that you need to call Repository.Unwrap() before calling this method if this Repository
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Repository) Update() *RepositoryUpdateOne {
	return (&RepositoryClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Repository entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Repository) Unwrap() *Repository {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("db: Repository is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Repository) String() string {
	var builder strings.Builder
	builder.WriteString("Repository(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", repository_name=")
	builder.WriteString(r.RepositoryName)
	builder.WriteString(", git_organization=")
	builder.WriteString(r.GitOrganization)
	builder.WriteString(", description=")
	builder.WriteString(r.Description)
	builder.WriteString(", git_url=")
	builder.WriteString(r.GitURL)
	builder.WriteByte(')')
	return builder.String()
}

// Repositories is a parsable slice of Repository.
type Repositories []*Repository

func (r Repositories) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
